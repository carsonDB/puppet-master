exports.struct = [{"type":"tag","name":"div","attr":{"id":"box","style":"position: absolute;"},"children":[{"type":"tag","name":"div","attr":{"class":"button","style":"position: absolute; background-color: red; width: 20px; height: 20px; border-radius:25px;"},"children":[]},{"type":"tag","name":"div","attr":{"class":"button","style":"position: absolute; background-color: red; width: 20px; height: 20px; border-radius:25px;"},"children":[]},{"type":"tag","name":"div","attr":{"class":"button","style":"position: absolute; background-color: red; width: 20px; height: 20px; border-radius:25px;"},"children":[]},{"type":"tag","name":"div","attr":{"class":"button","style":"position: absolute; background-color: red; width: 20px; height: 20px; border-radius:25px;"},"children":[]},{"type":"tag","name":"div","attr":{"id":"container","ppy":"container","style":"background-color: #00eeff;"},"children":[]}]}]
exports.init = function(dom){
(function(){

"use strict";
	// get native-dom (need to be changed)
	var buttons = this.findDom('class', 'button');
	var container = this.findDom('id', 'container');
	var box = this.findDom('id', 'box');

	var offsetLeft = container.get('offsetLeft');
	var offsetTop = container.get('offsetTop');
	var offsetWidth = container.get('offsetWidth');
	var offsetHeight = container.get('offsetHeight');
	buttons[0].set('style', 
		{ 
			left: offsetLeft - 10 + 'px', 
			top: offsetTop - 10 + 'px' 
		});
	buttons[1].set('style', 
		{ 
			left: offsetLeft + offsetWidth - 10 + 'px',
			top: offsetTop - 10 + 'px'
		});
	buttons[2].set('style', 
		{ 
			left: offsetLeft - 10 + 'px',
			top: offsetTop + offsetHeight - 10 + 'px'			
		});
	buttons[3].set('style',
		{
			left: offsetLeft + offsetWidth - 10 + 'px',
			top: offsetTop + offsetHeight - 10 + 'px'
		});

	var moveBox = {
		dom: container,
		state: 'fix',
		left: box.get('offsetLeft'), top: box.get('offsetTop'),
		init: function () 
		{
			var dom = this.dom;
			dom.set('addEventListener', 'mousedown', function (e) 
			{
				moveBox.state = 'move';
				moveBox.left = e.clientX;
				moveBox.top = e.clientY;
			});
			box.globalListen('mouseup', function () 
			{
				moveBox.state = 'fix';
			});
			box.globalListen('mousemove', function (e) 
			{
				if (moveBox.state == 'move')
				{
					// console.log(e.clientX - moveBox.left + 'px');
					box.set('style',
						{
							left: box.get('offsetLeft') + e.clientX - moveBox.left + 'px',
							top: box.get('offsetTop') + e.clientY - moveBox.top + 'px'
						});
					moveBox.left = e.clientX;
					moveBox.top = e.clientY;
				}
			});
		}
	};
	moveBox.init();

	// move-button constructor
	function MoveButton (dom, index, buttons) 
	{
		this.left = dom.get('offsetLeft');
		this.top = dom.get('offsetTop');
		this.state = 'fix';
		var self = this;
		dom.set('addEventListener', 'mousedown', function (e)
		{
			self.state = 'move';
			self.left = e.clientX;
			self.top = e.clientY;
		});
		box.globalListen('mouseup', function ()
		{
			self.state = 'fix';
		});
		box.globalListen('mousemove', function (e)
		{
			if (self.state != 'move')
				return;
			var offsetLeft = e.clientX - self.left;
			var offsetTop = e.clientY - self.top;
			// dom.style.left = dom.offsetLeft + offsetLeft + 'px';
			// dom.style.top = dom.offsetTop + offsetTop + 'px';
			if (index === 0)
			{
				box.set('style', 
					{
						left: box.get('offsetLeft') + offsetLeft + 'px',
						top: box.get('offsetTop') + offsetTop + 'px'
					});
				container.set('style', 
					{
						width: container.get('offsetWidth') - offsetLeft + 'px',
						height: container.get('offsetHeight') - offsetTop + 'px'
					});
			}
			else if (index == 1)
			{
				container.set('style',
					{
						width: container.get('offsetWidth') + offsetLeft + 'px',
						height: container.get('offsetHeight') - offsetTop + 'px'
					});
				box.set('style', 'top:' + box.offsetTop + offsetTop + 'px');
			}
			else if (index == 2)
			{
				box.set('style', 'left:' + box.offsetLeft + offsetLeft + 'px');
				container.set('style', 
					{
						width: container.get('offsetWidth') - offsetLeft + 'px',
						height: container.get('offsetHeight') + offsetTop + 'px'
					});
			}
			else if (index == 3)
			{
				container.set('style', 
					{
						width: container.get('offsetWidth') + offsetLeft + 'px',
						height: container.get('offsetHeight') + offsetTop + 'px'
					});
			}
			buttons[0].set('style', 
				{
					left: '-10px', top: '-10px'
				});
			buttons[1].set('style', 
				{
					left: container.get('offsetWidth') - 10 + 'px', top: '-10px'
				});
			buttons[2].set('style', 
				{
					left: '-10px', top: container.get('offsetHeight') - 10 + 'px'
				});
			buttons[3].set('style', 
				{
					left: container.get('offsetWidth') - 10 + 'px', top: container.get('offsetHeight') - 10 + 'px'
				});
			
			self.left = e.clientX;
			self.top = e.clientY;
		});
	}

	for (var i = 0; i < buttons.length; i++) 
	{
		new MoveButton(buttons[i], i, buttons);
	}
}).call(dom);
}
exports.require = require
exports.api = require("/home/carson/code/puppet-master/node_modules/flexible-box/")
